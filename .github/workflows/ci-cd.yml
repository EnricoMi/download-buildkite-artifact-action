name: CI-CD

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade --force --no-cache-dir pip
          pip install --force --no-cache-dir -r requirements.txt
          pip install --force --no-cache-dir pytest mock

      - name: PyTest
        env:
          PYTHONPATH: test
        run: python -m pytest --junit-xml test-results/pytest.xml

      - name: Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        # the action is useless on pull_request events from forks
        # as it can not create check runs or pull request comments
        if: always() && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository)
        with:
          github_token: ${{ github.token }}
          files: "test-results/*.xml"

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Unit Test Results
          path: test-results/*.xml

  config-deploy:
    name: Configure Deployment
    needs: build-and-test
    # do not build or deploy on forked repositories
    if: github.repository_owner == 'EnricoMi'
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.action.outputs.image }}
      image-exists: ${{ steps.image.outputs.exists }}
      image-version: ${{ steps.action.outputs.version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract action image and version
        # we deploy from a specific commit on master (the one that mentions a new version the first time)
        # so we need to tell docker/metadata-action to extract docker tags from that version
        id: action
        run: |
          image=$(grep -A 10 "^runs:" action.yml | grep -E "^\s+image:\s" | sed -E -e "s/^\s+image:\s*'//" -e "s/docker:\/\///" -e "s/'\s*$//")
          version=$(cut -d : -f 2 <<< "$image")
          echo "image=$image" >>$GITHUB_OUTPUT
          echo "version=$version" >>$GITHUB_OUTPUT
        shell: bash

      - name: Check action image existence
        id: image
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: |
          if docker manifest inspect '${{ steps.action.outputs.image }}'
          then
            echo "exists=true" >>$GITHUB_OUTPUT
          fi
        shell: bash

  deploy:
    name: Deploy to GitHub
    needs: [build-and-test, config-deploy]

    if: github.repository_owner == 'EnricoMi'

    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/EnricoMi/download-buildkite-artifact-action
          flavor: |
            latest=true
            prefix=v
          tags: |
            type=sha
            type=ref,event=tag
            type=semver,pattern={{major}},value=${{ needs.config-deploy.outputs.image-version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.config-deploy.outputs.image-version }}
            type=semver,pattern={{version}},value=${{ needs.config-deploy.outputs.image-version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          pull: true
          # deploy image actions from commits pushed to master and
          # deploy Dockerfile actions from pushed version tags (no major versions)
          push: |
            ${{
              github.event_name == 'push' && (
                needs.config-deploy.outputs.image != 'Dockerfile' && startsWith(github.ref, 'refs/heads/master') && needs.config-deploy.outputs.image-exists != 'true' ||
                needs.config-deploy.outputs.image == 'Dockerfile' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '.')
              )
            }}
