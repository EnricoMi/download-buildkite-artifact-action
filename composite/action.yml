name: 'Download Buildkite Artifact'
author: 'EnricoMi'
description: 'A GitHub Action to download artifacts from a Buildkite pipeline'

inputs:
  github_token:
    description: 'GitHub API Access Token'
    default: ${{ github.token }}
    required: false
  buildkite_token:
    description: 'Buildkite API Access Token'
    required: true
  buildkite_build_url:
    description: 'Buildkite build url to downloaded artifacts from'
    required: false
  ignore_build_states:
    description: 'List of build states to ignore. No artifacts will be downloaded when build has one of these states. Use comma to separate multiple states, e.g. "canceled,skipped,failed"'
    required: false
    default: ''
  ignore_job_states:
    description: 'List of job states to ignore. No artifacts of jobs that have this state are downloaded. Use comma to separate multiple states, e.g. "timed_out,failed"'
    required: false
    default: ''
  output_path:
    description: 'Path were downloaded artifacts are stored'
    required: false
    default: '.'
  log_level:
    description: 'Action logging level'
    required: false
    default: 'INFO'

outputs:
  build-number:
    description: 'The number of the Buildkite build'
    value: ${{ steps.download.outputs.build-number }}
  build-state:
    description: 'The state of the Buildkite build'
    value: ${{ steps.download.outputs.build-state }}
  download-state:
    description: 'The outcome of downloading artifacts: skipped, success, failure'
    value: ${{ steps.download.outputs.download-state }}
  download-paths:
    description: 'The paths of downloaded artifacts as a Json array of strings'
    value: ${{ steps.download.outputs.download-paths }}
  download-files:
    description: 'The number of downloaded files'
    value: ${{ steps.download.outputs.download-files }}

runs:
  using: 'composite'
  steps:
    - name: Check for Python3
      run: |
        echo '##[group]Check for Python3'
        # we check version here just to execute `python3` with an argument
        # on Windows, there is a `python3.exe` that is a proxy to trigger installation from app store
        # command `which python3` finds that, but `python3 -V` does not return the version on stdout
        if ! which python3 || [[ $(python3 -V) != *"python 3."* && $(python3 -V) != *"Python 3."* ]]
        then
          if ! which python || [[ $(python -V) != *"python 3."* && $(python -V) != *"Python 3."* ]]
          then
            echo "::error::No python3 interpreter found. Please setup python before running this action. You could use https://github.com/actions/setup-python."
            exit 1
          fi

          interpreter="$(which python)"
          if [[ ! -e "${interpreter}3" ]]
          then
            mkdir -p "$RUNNER_TEMP/bin/"
            ln -s "$interpreter" "$RUNNER_TEMP/bin/python3"
            echo "$RUNNER_TEMP/bin" >> $GITHUB_PATH
          fi
        fi
        echo '##[endgroup]'
      shell: bash

    - name: Install Python dependencies
      run: |
        echo '##[group]Install Python dependencies'
        python3 -m pip install -r $GITHUB_ACTION_PATH/../requirements.txt
        echo '##[endgroup]'
      shell: bash

    - name: Download artifacts
      id: download
      run: |
        echo '##[group]Download artifacts'
        python3 $GITHUB_ACTION_PATH/../download_artifacts.py
        echo '##[endgroup]'
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
        BUILDKITE_TOKEN: ${{ inputs.buildkite_token }}
        BUILDKITE_BUILD_URL: ${{ inputs.buildkite_build_url }}
        IGNORE_BUILD_STATES: ${{ inputs.ignore_build_states }}
        IGNORE_JOB_STATES: ${{ inputs.ignore_job_states }}
        OUTPUT_PATH: ${{ inputs.output_path }}
        LOG_LEVEL: ${{ inputs.log_level }}
      shell: bash

branding:
  icon: 'download-cloud'
  color: 'green'
